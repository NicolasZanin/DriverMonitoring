[
    {
        "id": "7d33f045adfa2ce5",
        "type": "tab",
        "label": "Flux 1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "ed404996291d3ded",
        "type": "tab",
        "label": "Flux 2",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "95056920d2e391b4",
        "type": "tab",
        "label": "Flux 3",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "0504f462f986c487",
        "type": "influxdb",
        "hostname": "127.0.0.1",
        "port": "8086",
        "protocol": "http",
        "database": "database",
        "name": "influx_in",
        "usetls": false,
        "tls": "",
        "influxdbVersion": "2.0",
        "url": "http://influxdb:8086",
        "timeout": "10",
        "rejectUnauthorized": false
    },
    {
        "id": "f02c2e29ba92c8ca",
        "type": "ui_base",
        "theme": {
            "name": "theme-light",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "base-color": {
                    "default": "#0094CE",
                    "value": "#0094CE",
                    "edited": false
                },
                "page-titlebar-backgroundColor": {
                    "value": "#0094CE",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#fafafa",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#1bbfff",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#111111",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#0094ce",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey",
                "palette": "light"
            }
        },
        "site": {
            "name": "Node-RED Dashboard",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "lockMenu": "false",
            "allowTempTheme": "true",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "26b1797a2f299d3c",
        "type": "ui_tab",
        "name": "Blinky Driver",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "bc962b1e502fdd92",
        "type": "ui_group",
        "name": "Données",
        "tab": "26b1797a2f299d3c",
        "order": 1,
        "disp": true,
        "width": "23",
        "collapse": false
    },
    {
        "id": "2d526cab482570ba",
        "type": "ui_group",
        "name": "Collomne 1",
        "tab": "26b1797a2f299d3c",
        "order": 2,
        "disp": false,
        "width": "11",
        "collapse": false
    },
    {
        "id": "161fc0b22611f508",
        "type": "ui_group",
        "name": "Collomne 2",
        "tab": "26b1797a2f299d3c",
        "order": 3,
        "disp": false,
        "width": "12",
        "collapse": false
    },
    {
        "id": "ee595a02f54ae5d7",
        "type": "ui_group",
        "name": "plage",
        "tab": "26b1797a2f299d3c",
        "order": 4,
        "disp": false,
        "width": "5",
        "collapse": false
    },
    {
        "id": "ae91c12e7be508a2",
        "type": "ui_group",
        "name": "plage 2",
        "tab": "26b1797a2f299d3c",
        "order": 5,
        "disp": false,
        "width": "5",
        "collapse": false
    },
    {
        "id": "5e9e0664f4beef1c",
        "type": "ui_group",
        "name": "plage 3",
        "tab": "26b1797a2f299d3c",
        "order": 6,
        "disp": false,
        "width": "5",
        "collapse": false
    },
    {
        "id": "2b29f88d484ee446",
        "type": "ui_group",
        "name": "plage 0.1",
        "tab": "26b1797a2f299d3c",
        "order": 7,
        "disp": false,
        "width": "5",
        "collapse": false
    },
    {
        "id": "bea4d714d15a3d12",
        "type": "ui_group",
        "name": "plage 1.1",
        "tab": "26b1797a2f299d3c",
        "order": 8,
        "disp": false,
        "width": "3",
        "collapse": false
    },
    {
        "id": "efdef055a66f84fc",
        "type": "ui_tab",
        "name": "Blinky Driver Simple",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "1f179a239394f295",
        "type": "ui_group",
        "name": "Default",
        "tab": "efdef055a66f84fc",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "3f6c83fc40530c31",
        "type": "ui_group",
        "name": "Default",
        "tab": "efdef055a66f84fc",
        "order": 3,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "c4458a8ab5777971",
        "type": "ui_group",
        "name": "Collomne 2",
        "tab": "efdef055a66f84fc",
        "order": 3,
        "disp": false,
        "width": "11",
        "collapse": false
    },
    {
        "id": "1de00478ef66c8e4",
        "type": "ui_group",
        "name": "Données",
        "tab": "efdef055a66f84fc",
        "order": 4,
        "disp": true,
        "width": "23",
        "collapse": false
    },
    {
        "id": "cb1319d38f752e0a",
        "type": "ui_group",
        "name": "Collomne 2 aprés",
        "tab": "efdef055a66f84fc",
        "order": 5,
        "disp": false,
        "width": "23",
        "collapse": false
    },
    {
        "id": "c5d2e4d132eac578",
        "type": "ui_group",
        "name": "Visualize",
        "tab": "efdef055a66f84fc",
        "order": 6,
        "disp": false,
        "width": "23",
        "collapse": false
    },
    {
        "id": "a4aad4e355e6578a",
        "type": "ui_tab",
        "name": "Blinky Data",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "e431f4f4e0ad808a",
        "type": "ui_group",
        "name": "Default",
        "tab": "a4aad4e355e6578a",
        "order": 1,
        "disp": false,
        "width": "23",
        "collapse": false
    },
    {
        "id": "7e423cde4281a7f2",
        "type": "ui_group",
        "name": "data visualize",
        "tab": "a4aad4e355e6578a",
        "order": 2,
        "disp": false,
        "width": "23",
        "collapse": false
    },
    {
        "id": "3932fb80003a0cc6",
        "type": "http in",
        "z": "7d33f045adfa2ce5",
        "name": "http_cardiaque",
        "url": "/app/cardiaque/:valuec/:time",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 180,
        "y": 120,
        "wires": [
            [
                "80dfcfd3f6475bfe"
            ]
        ]
    },
    {
        "id": "80dfcfd3f6475bfe",
        "type": "function",
        "z": "7d33f045adfa2ce5",
        "name": "function_cardiaque",
        "func": "let valueC = Number(msg.req.params.valuec);\nlet time = msg.req.params.time;\n\nmsg.payload = {\n    value: valueC,\n    time: time\n};\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 120,
        "wires": [
            [
                "ce003374eaa7783a",
                "0ee71603d9dc2bbf"
            ]
        ]
    },
    {
        "id": "ce003374eaa7783a",
        "type": "debug",
        "z": "7d33f045adfa2ce5",
        "name": "debug_cardiaque",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 450,
        "y": 80,
        "wires": []
    },
    {
        "id": "af0aaa9bdcef7077",
        "type": "http in",
        "z": "7d33f045adfa2ce5",
        "name": "http_accelerometer",
        "url": "/app/accelerometer/:x/:y/:z/:time",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 190,
        "y": 440,
        "wires": [
            [
                "2a3b84b9e454c694"
            ]
        ]
    },
    {
        "id": "2a3b84b9e454c694",
        "type": "function",
        "z": "7d33f045adfa2ce5",
        "name": "function_accelerometer",
        "func": "let x = Number(msg.req.params.x);\nlet y = Number(msg.req.params.y);\nlet z = Number(msg.req.params.z);\nlet time = msg.req.params.time;\n\nmsg.payload = {\n    value_x: x,\n    value_y: y,\n    value_z: z,\n    time: time\n};\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1170,
        "y": 440,
        "wires": [
            [
                "8987dda3253a708a",
                "b836ff4cbe949f16",
                "9f8fb2ff54ca0948"
            ]
        ]
    },
    {
        "id": "8987dda3253a708a",
        "type": "debug",
        "z": "7d33f045adfa2ce5",
        "name": "debug_accelerometer",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1180,
        "y": 480,
        "wires": []
    },
    {
        "id": "591fb441b02385cd",
        "type": "http in",
        "z": "7d33f045adfa2ce5",
        "name": "Http_Home",
        "url": "/app",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 170,
        "y": 580,
        "wires": [
            [
                "e38e0d798e5fc06a"
            ]
        ]
    },
    {
        "id": "c7d1bcaa5d6270f8",
        "type": "http response",
        "z": "7d33f045adfa2ce5",
        "name": "http_out",
        "statusCode": "200",
        "headers": {},
        "x": 700,
        "y": 580,
        "wires": []
    },
    {
        "id": "22b77ab847911bf2",
        "type": "http response",
        "z": "7d33f045adfa2ce5",
        "name": "http_out",
        "statusCode": "200",
        "headers": {},
        "x": 1760,
        "y": 440,
        "wires": []
    },
    {
        "id": "9f8fb2ff54ca0948",
        "type": "function",
        "z": "7d33f045adfa2ce5",
        "name": "function 1",
        "func": "msg.payload = \"accelerometer;\" + msg.payload.time;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1460,
        "y": 440,
        "wires": [
            [
                "22b77ab847911bf2"
            ]
        ]
    },
    {
        "id": "e38e0d798e5fc06a",
        "type": "function",
        "z": "7d33f045adfa2ce5",
        "name": "function_Home",
        "func": "msg.payload = \"ok\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 580,
        "wires": [
            [
                "07385d52738bc212",
                "c7d1bcaa5d6270f8"
            ]
        ]
    },
    {
        "id": "07385d52738bc212",
        "type": "debug",
        "z": "7d33f045adfa2ce5",
        "name": "debug_Home",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 440,
        "y": 540,
        "wires": []
    },
    {
        "id": "24ea63205d85fc42",
        "type": "http in",
        "z": "7d33f045adfa2ce5",
        "name": "http_accelerometer2",
        "url": "/app/accelerometer/:value",
        "method": "get",
        "upload": true,
        "swaggerDoc": "",
        "x": 190,
        "y": 240,
        "wires": [
            [
                "bd0a2c1a516ff98a"
            ]
        ]
    },
    {
        "id": "b131c8da435b513a",
        "type": "split",
        "z": "7d33f045adfa2ce5",
        "name": "",
        "splt": "b",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "property": "payload",
        "x": 730,
        "y": 240,
        "wires": [
            [
                "309578c133f67608"
            ]
        ]
    },
    {
        "id": "bd0a2c1a516ff98a",
        "type": "function",
        "z": "7d33f045adfa2ce5",
        "name": "function_accelerometer",
        "func": "msg.payload = msg.req.params.value;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 240,
        "wires": [
            [
                "b131c8da435b513a"
            ]
        ]
    },
    {
        "id": "309578c133f67608",
        "type": "function",
        "z": "7d33f045adfa2ce5",
        "name": "function 2",
        "func": "if (msg.payload != \"\") {\n    let splitValue = msg.payload.split(':');\n    msg.payload = splitValue;\n}\nelse {\n    msg.payload = \"\";\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 940,
        "y": 240,
        "wires": [
            [
                "97d7221dd416e070",
                "b3dc753b3ee2c66c"
            ]
        ]
    },
    {
        "id": "97d7221dd416e070",
        "type": "function",
        "z": "7d33f045adfa2ce5",
        "name": "function 3",
        "func": "if (msg.payload != \"\") {\n    msg.payload = \"accelerometer;\" +msg.payload[3];\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1120,
        "y": 240,
        "wires": [
            [
                "62db381517c73141"
            ]
        ]
    },
    {
        "id": "62db381517c73141",
        "type": "join",
        "z": "7d33f045adfa2ce5",
        "name": "",
        "mode": "auto",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "a",
        "joinerType": "str",
        "useparts": false,
        "accumulate": false,
        "timeout": "",
        "count": "",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "num",
        "reduceFixup": "",
        "x": 1450,
        "y": 240,
        "wires": [
            [
                "423db6665f468301"
            ]
        ]
    },
    {
        "id": "b3dc753b3ee2c66c",
        "type": "function",
        "z": "7d33f045adfa2ce5",
        "name": "function 4",
        "func": "if (msg.payload != \"\") {\n    msg.payload = {\n        value_x: Number(msg.payload[0]),\n        value_y: Number(msg.payload[1]),\n        value_z: Number(msg.payload[2]),\n        time: msg.payload[3]\n    };\n}\nelse {\n    msg.payload = \"\";\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1120,
        "y": 340,
        "wires": [
            [
                "b836ff4cbe949f16"
            ]
        ]
    },
    {
        "id": "423db6665f468301",
        "type": "http response",
        "z": "7d33f045adfa2ce5",
        "name": "http_out",
        "statusCode": "201",
        "headers": {},
        "x": 1760,
        "y": 240,
        "wires": []
    },
    {
        "id": "0ee71603d9dc2bbf",
        "type": "influxdb out",
        "z": "7d33f045adfa2ce5",
        "influxdb": "0504f462f986c487",
        "name": "influx_cardiaque",
        "measurement": "cardiaque",
        "precision": "",
        "retentionPolicy": "",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "myorg",
        "bucket": "mybucket",
        "x": 760,
        "y": 120,
        "wires": []
    },
    {
        "id": "b836ff4cbe949f16",
        "type": "influxdb out",
        "z": "7d33f045adfa2ce5",
        "influxdb": "0504f462f986c487",
        "name": "influx_accelerometer",
        "measurement": "accelerometer",
        "precision": "",
        "retentionPolicy": "",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "myorg",
        "bucket": "mybucket",
        "x": 1500,
        "y": 340,
        "wires": []
    },
    {
        "id": "38797788f6b75bb1",
        "type": "split",
        "z": "ed404996291d3ded",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "property": "payload",
        "x": 2050,
        "y": 760,
        "wires": [
            [
                "d06c4f0dd84decfd",
                "1be976bde64a6ddc"
            ]
        ]
    },
    {
        "id": "d06c4f0dd84decfd",
        "type": "debug",
        "z": "ed404996291d3ded",
        "name": "debug 19",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2060,
        "y": 720,
        "wires": []
    },
    {
        "id": "19f99a9035d9286b",
        "type": "debug",
        "z": "ed404996291d3ded",
        "name": "debug 20",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2520,
        "y": 860,
        "wires": []
    },
    {
        "id": "0a271ea1c05f0274",
        "type": "debug",
        "z": "ed404996291d3ded",
        "name": "debug 21",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2740,
        "y": 980,
        "wires": []
    },
    {
        "id": "c220fb837f10ecec",
        "type": "function",
        "z": "ed404996291d3ded",
        "name": "diviser par minute",
        "func": "let data = msg.payload;\nlet groups = {};\n\n// Fonction pour arrondir l'heure à la minute la plus proche divisible par 5\nfunction roundTo5Minutes(time) {\n    // Extraire l'heure et les minutes\n    let date = new Date(time);\n    let minutes = date.getMinutes();\n    // Arrondir aux multiples de 5 minutes\n    let roundedMinutes = Math.floor(minutes / 5) * 5;\n    date.setMinutes(roundedMinutes);\n    date.setSeconds(0);\n    date.setMilliseconds(0);\n    return date.toISOString().substring(0, 16); // Retourne le timestamp au format \"YYYY-MM-DDTHH:mm\"\n}\n\n// Grouper les données par intervalle de 5 minutes\ndata.forEach(item => {\n    // Extraire la minute arrondie\n    let roundedMinute = roundTo5Minutes(item._time);\n\n    // Si cette minute n'existe pas encore dans le groupe, l'ajouter\n    if (!groups[roundedMinute]) {\n        groups[roundedMinute] = [];\n    }\n\n    // Ajouter la donnée à l'intervalle approprié\n    groups[roundedMinute].push(item);\n});\n\n// Envoyer les groupes\nmsg.payload = groups;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2450,
        "y": 1020,
        "wires": [
            [
                "0e2f9bfa9a7e793b",
                "a038f64817f726e4"
            ]
        ]
    },
    {
        "id": "0e2f9bfa9a7e793b",
        "type": "debug",
        "z": "ed404996291d3ded",
        "name": "debug 22",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2480,
        "y": 980,
        "wires": []
    },
    {
        "id": "a038f64817f726e4",
        "type": "function",
        "z": "ed404996291d3ded",
        "name": "function_variance",
        "func": "// La variable msg.payload contient l'objet avec des timestamps et des données\nlet result = [];\n\n// Parcourir chaque timestamp dans msg.payload\nfor (let timestamp in msg.payload) {\n    let arrayData = msg.payload[timestamp];  // Le tableau de données pour ce timestamp\n\n    // Initialisation des variables pour les calculs min et max\n    let minVal = Infinity;\n    let maxVal = -Infinity;\n    let minTimestamp = null;\n\n    // Trouver la valeur minimale et maximale dans le tableau\n    arrayData.forEach(entry => {\n        let value = entry._value;\n        let entryTimestamp = entry._time;\n\n        // Mise à jour de la valeur minimale et maximale\n        if (value < minVal) {\n            minVal = value;\n            minTimestamp = entryTimestamp;  // Sauvegarder le timestamp de la valeur minimale\n        }\n        if (value > maxVal) {\n            maxVal = value;\n        }\n    });\n\n    // Calculer la différence absolue entre max et min\n    let diff = Math.abs(maxVal - minVal);\n\n    // Si la différence est supérieure à 15, on crée un point avec payload et timestamp\n    if (diff > 15) {\n        result.push({\n            _value: diff,\n            _time: minTimestamp  // Utiliser le timestamp de la valeur minimale\n        });\n    }\n}\n\n// Retourner le tableau résultat comme payload\nmsg.payload = result;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2710,
        "y": 1020,
        "wires": [
            [
                "0a271ea1c05f0274",
                "991e91987dc7b559"
            ]
        ]
    },
    {
        "id": "991e91987dc7b559",
        "type": "split",
        "z": "ed404996291d3ded",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "property": "payload",
        "x": 2950,
        "y": 1020,
        "wires": [
            [
                "0a92b84107a7fe24",
                "1771e987bb5ece15",
                "ec3c45cca7564b51"
            ]
        ]
    },
    {
        "id": "0a92b84107a7fe24",
        "type": "debug",
        "z": "ed404996291d3ded",
        "name": "debug 23",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2940,
        "y": 980,
        "wires": []
    },
    {
        "id": "1f5ad6f60858e5bb",
        "type": "debug",
        "z": "ed404996291d3ded",
        "name": "debug 24",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 3220,
        "y": 980,
        "wires": []
    },
    {
        "id": "6b2d9c8e5b3cc841",
        "type": "function",
        "z": "ed404996291d3ded",
        "name": "function_split_cardiaque",
        "func": "msg.timestamp = msg.payload._time;\nmsg.payload = Number(msg.payload._value);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2470,
        "y": 900,
        "wires": [
            [
                "19f99a9035d9286b",
                "513022792c668345"
            ]
        ]
    },
    {
        "id": "1771e987bb5ece15",
        "type": "function",
        "z": "ed404996291d3ded",
        "name": "function_split_variance",
        "func": "msg.timestamp = msg.payload._time;\nmsg.payload = Number(msg.payload._value);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3180,
        "y": 1020,
        "wires": [
            [
                "1f5ad6f60858e5bb",
                "497cc7c60269247b"
            ]
        ]
    },
    {
        "id": "2a6ec5c53c0965ec",
        "type": "function",
        "z": "ed404996291d3ded",
        "name": "temps de conduite",
        "func": "let data = msg.payload;\n\n// Trouver le timestamp le plus ancien et le plus récent dans l'ensemble du tableau\nlet oldestTimestamp = new Date(data[0]._time).getTime() / 1000;  // Conversion en secondes\nlet newestTimestamp = new Date(data[0]._time).getTime() / 1000;  // Conversion en secondes\n\ndata.forEach(item => {\n    let currentTimestamp = new Date(item._time).getTime() / 1000;  // Conversion en secondes\n    if (currentTimestamp < oldestTimestamp) {\n        oldestTimestamp = currentTimestamp;\n    }\n    if (currentTimestamp > newestTimestamp) {\n        newestTimestamp = currentTimestamp;\n    }\n});\n\n// Calculer la différence de temps en secondes directement\nlet timeDifferenceSec = newestTimestamp - oldestTimestamp;\n\n// Convertir la différence en heures et minutes\nlet hours = Math.floor(timeDifferenceSec / 3600);  // Obtenir le nombre d'heures\nlet minutes = Math.floor((timeDifferenceSec % 3600) / 60);  // Obtenir le reste en minutes\n\n// Formater en HH:MM\nlet formattedTimeDifference = `${String(hours).padStart(2, '0')}:${String(minutes).padStart(2, '0')}`;\n\n// Retourner le message formaté\nmsg.payload = formattedTimeDifference;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2450,
        "y": 180,
        "wires": [
            [
                "9981306c33188658",
                "4f6bc1f5523f4d98",
                "1d2b3a6b878a0bae"
            ]
        ]
    },
    {
        "id": "4f6bc1f5523f4d98",
        "type": "debug",
        "z": "ed404996291d3ded",
        "name": "debug 25",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2480,
        "y": 140,
        "wires": []
    },
    {
        "id": "d408acef9282edf2",
        "type": "function",
        "z": "ed404996291d3ded",
        "name": "function_query_accelerometer",
        "func": "const start = flow.get(\"start\");\nconst end = flow.get(\"end\");\n\nmsg = {\n    query: `from(bucket: \"mybucket\")\\n` +\n        `  |> range(start: ${start}, stop: ${end})\\n` +\n        `  |> filter(fn: (r) => r[\"_measurement\"] == \"accelerometer\")`\n};\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1450,
        "y": 1340,
        "wires": [
            [
                "7c27dec090e8f320",
                "2fef56f36bb01d75"
            ]
        ]
    },
    {
        "id": "ea73cbddbffcb53e",
        "type": "split",
        "z": "ed404996291d3ded",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "property": "payload",
        "x": 2050,
        "y": 1340,
        "wires": [
            [
                "200d32686dadc41b",
                "4db12aa6235a6764"
            ]
        ]
    },
    {
        "id": "2fef56f36bb01d75",
        "type": "debug",
        "z": "ed404996291d3ded",
        "name": "debug 26",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "query",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1520,
        "y": 1300,
        "wires": []
    },
    {
        "id": "7ba7c82171431853",
        "type": "debug",
        "z": "ed404996291d3ded",
        "name": "debug 27",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1760,
        "y": 1300,
        "wires": []
    },
    {
        "id": "200d32686dadc41b",
        "type": "debug",
        "z": "ed404996291d3ded",
        "name": "debug 28",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2060,
        "y": 1300,
        "wires": []
    },
    {
        "id": "2b9760c2d215c9a1",
        "type": "function",
        "z": "ed404996291d3ded",
        "name": "function_split_acc",
        "func": "msg.timestamp = msg.payload._time;\n\nif (msg.payload._field === \"value_x\" && (msg.payload._value > 0.2 || msg.payload._value < -0.2)) {\n    msg.payload = msg.payload._value;\n    return msg;\n}\n\nif (msg.payload._field === \"value_y\" && (msg.payload._value > 0.3 || msg.payload._value < -0.3)) {\n    msg.payload = msg.payload._value;\n    return msg;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2450,
        "y": 1340,
        "wires": [
            [
                "488d553fc222087d",
                "ef06cd2e85c5ca2d",
                "4cf973c4c9383d56"
            ]
        ]
    },
    {
        "id": "488d553fc222087d",
        "type": "debug",
        "z": "ed404996291d3ded",
        "name": "debug 29",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2520,
        "y": 1300,
        "wires": []
    },
    {
        "id": "71c7c433901741ed",
        "type": "function",
        "z": "ed404996291d3ded",
        "name": "function_reset",
        "func": "msg.payload = [];\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1000,
        "y": 660,
        "wires": [
            [
                "c0fe076b8533cb9a"
            ]
        ]
    },
    {
        "id": "4b06fb50e1baf3bb",
        "type": "function",
        "z": "ed404996291d3ded",
        "name": "function_somnolence",
        "func": "msg.timestamp = msg.payload._time;\nmsg.payload = (Number(msg.payload._value) < 60) ? 1 : 0;  // 1 si en somnolence, sinon 0\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2460,
        "y": 680,
        "wires": [
            [
                "aa61fc8400637083",
                "2e91625f303a2201",
                "0c4801864eb67567",
                "bdb5c08f65ba5c96"
            ]
        ]
    },
    {
        "id": "aa61fc8400637083",
        "type": "debug",
        "z": "ed404996291d3ded",
        "name": "debug 30",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2500,
        "y": 640,
        "wires": []
    },
    {
        "id": "06bdd82dd9bc56b6",
        "type": "function",
        "z": "ed404996291d3ded",
        "name": "function_somnolence_max",
        "func": "// Assumed that msg.payload is the array of data\nlet somnolenceData = msg.payload;\n\nlet somnolencePeriods = []; // No type annotations in JavaScript\nlet currentStartTime = null;\n\nfor (let i = 0; i < somnolenceData.length; i++) {\n    let dataPoint = somnolenceData[i];\n\n    if (dataPoint._value < 60) {\n        // If we are in a sleep period, start or continue it\n        if (currentStartTime === null) {\n            currentStartTime = new Date(dataPoint._time); // Starting the somnolence period\n        }\n    } else {\n        // If somnolence ends, record the period\n        if (currentStartTime !== null) {\n            let endTime = new Date(dataPoint._time);\n            let durationInSeconds = (endTime.getTime() - currentStartTime.getTime()) / 1000; // Duration in seconds\n            somnolencePeriods.push({\n                startTime: currentStartTime,\n                endTime: endTime,\n                duration: durationInSeconds\n            });\n            currentStartTime = null;\n        }\n    }\n}\n\n// Handle the case where the somnolence period ends at the last data point\nif (currentStartTime !== null) {\n    let endTime = new Date(somnolenceData[somnolenceData.length - 1]._time);\n    let durationInSeconds = (endTime.getTime() - currentStartTime.getTime()) / 1000;\n    somnolencePeriods.push({\n        startTime: currentStartTime,\n        endTime: endTime,\n        duration: durationInSeconds\n    });\n}\n\n// Find the longest somnolence period\nlet longestSleepPeriod = somnolencePeriods.reduce((max, current) => {\n    return current.duration > max.duration ? current : max;\n}, { duration: 0 });\n\n// Assuming longestSleepPeriod.duration is in seconds\nlet durationInSeconds = longestSleepPeriod.duration;\n\n// Calculate hours and minutes\nlet hours = Math.floor(durationInSeconds / 3600); // 1 hour = 3600 seconds\nlet minutes = Math.floor((durationInSeconds % 3600) / 60); // 1 minute = 60 seconds\n\n// Format as HH:MM\nlet formattedDuration = `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}`;\n\nreturn {\n    payload: formattedDuration\n};\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2480,
        "y": 580,
        "wires": [
            [
                "c5ecbcda550ada7d",
                "56677260e08b616f"
            ]
        ]
    },
    {
        "id": "56677260e08b616f",
        "type": "debug",
        "z": "ed404996291d3ded",
        "name": "debug 31",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2540,
        "y": 540,
        "wires": []
    },
    {
        "id": "c209b04d8876298f",
        "type": "function",
        "z": "ed404996291d3ded",
        "name": "function_somnolence_total",
        "func": "// Assumed that msg.payload is the array of data\nlet somnolenceData = msg.payload;\n\nlet totalSomnolenceDuration = 0; // Initialize total somnolence time in seconds\nlet currentStartTime = null;\n\nfor (let i = 0; i < somnolenceData.length; i++) {\n    let dataPoint = somnolenceData[i];\n\n    if (dataPoint._value < 60) {\n        // If we are in a sleep period, start or continue it\n        if (currentStartTime === null) {\n            currentStartTime = new Date(dataPoint._time); // Starting the somnolence period\n        }\n    } else {\n        // If somnolence ends, record the period\n        if (currentStartTime !== null) {\n            let endTime = new Date(dataPoint._time);\n            let durationInSeconds = (endTime.getTime() - currentStartTime.getTime()) / 1000; // Duration in seconds\n            totalSomnolenceDuration += durationInSeconds; // Add duration to the total\n            currentStartTime = null;\n        }\n    }\n}\n\n// Handle the case where the somnolence period ends at the last data point\nif (currentStartTime !== null) {\n    let endTime = new Date(somnolenceData[somnolenceData.length - 1]._time);\n    let durationInSeconds = (endTime.getTime() - currentStartTime.getTime()) / 1000;\n    totalSomnolenceDuration += durationInSeconds; // Add duration to the total\n}\n\n// Calculate hours and minutes for the total somnolence time\nlet hours = Math.floor(totalSomnolenceDuration / 3600); // 1 hour = 3600 seconds\nlet minutes = Math.floor((totalSomnolenceDuration % 3600) / 60); // 1 minute = 60 seconds\n\n// Format as HH:MM\nlet formattedDuration = `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}`;\n\nreturn {\n    payload: formattedDuration\n};",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2480,
        "y": 480,
        "wires": [
            [
                "a9bccde7a97339d8",
                "cb2beef8d7fa69f6",
                "282fbc4bb73564bd"
            ]
        ]
    },
    {
        "id": "466064a18fa952a4",
        "type": "function",
        "z": "ed404996291d3ded",
        "name": "function_somnolence_frequent",
        "func": "// Assumed that msg.payload is the array of data\nlet somnolenceData = msg.payload;\n\n// Initialize a map to store somnolence counts for each hour (0 to 23)\nlet somnolenceByHour = Array(24).fill(0);\n\nfor (let i = 0; i < somnolenceData.length; i++) {\n    let dataPoint = somnolenceData[i];\n\n    if (dataPoint._value < 60) {\n        // If somnolence is detected, get the hour from the timestamp\n        let timestamp = new Date(dataPoint._time);\n        let hour = timestamp.getHours(); // Extract the hour from the timestamp\n        somnolenceByHour[hour] += 1; // Increment the count for this hour\n    }\n}\n\n// Find the hour with the most frequent somnolence\nlet mostCommonHour = somnolenceByHour.reduce((max, count, index) => {\n    return count > max.count ? { hour: index, count: count } : max;\n}, { hour: -1, count: 0 });\n\n// Format the hour into HH:00 (e.g., \"08:00\" for 8 AM)\nlet formattedHour = `${mostCommonHour.hour.toString().padStart(2, '0')}:00`;\n\nreturn {\n    payload: formattedHour\n};",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2490,
        "y": 380,
        "wires": [
            [
                "2e017bc182839095",
                "1f208e688fdd6873"
            ]
        ]
    },
    {
        "id": "cb2beef8d7fa69f6",
        "type": "debug",
        "z": "ed404996291d3ded",
        "name": "debug 32",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2540,
        "y": 440,
        "wires": []
    },
    {
        "id": "2e017bc182839095",
        "type": "debug",
        "z": "ed404996291d3ded",
        "name": "debug 33",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2560,
        "y": 340,
        "wires": []
    },
    {
        "id": "5fdf4ca7e76e76e6",
        "type": "function",
        "z": "ed404996291d3ded",
        "name": "function_count_dérive",
        "func": "// Initialize a variable to count the number of derivatives\nlet derivativeCount = 0;\n\n// Iterate through each item in the payload\nfor (let i = 0; i < msg.payload.length; i++) {\n    let dataPoint = msg.payload[i];  // Get the current data point\n\n    // Check for \"value_x\" field and the specified condition\n    if (dataPoint._field === \"value_x\" && (dataPoint._value > 0.2 || dataPoint._value < -0.2)) {\n        derivativeCount += 1;  // Increment the derivative count for \"value_x\"\n    }\n\n    // Check for \"value_y\" field and the specified condition\n    if (dataPoint._field === \"value_y\" && (dataPoint._value > 0.3 || dataPoint._value < -0.3)) {\n        derivativeCount += 1;  // Increment the derivative count for \"value_y\"\n    }\n}\n\n// Return the count of derivatives\nreturn {\n    payload: derivativeCount\n};",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2460,
        "y": 1440,
        "wires": [
            [
                "31e07b02e92ebe47",
                "9bb132b33e29368b"
            ]
        ]
    },
    {
        "id": "693d1b46748bd487",
        "type": "function",
        "z": "ed404996291d3ded",
        "name": "function_query_cardiaque",
        "func": "const start = flow.get(\"start\");\nconst end = flow.get(\"end\");\n\nmsg = {\n    query: `from(bucket: \"mybucket\")\\n` +\n        `  |> range(start: ${start}, stop: ${end})\\n` + \n           `  |> filter(fn: (r) => r[\"_measurement\"] == \"cardiaque\")`\n};\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1430,
        "y": 760,
        "wires": [
            [
                "f3f02569dba8e250",
                "52ed2e4a4e410830"
            ]
        ]
    },
    {
        "id": "52ed2e4a4e410830",
        "type": "debug",
        "z": "ed404996291d3ded",
        "name": "debug 34",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "query",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1480,
        "y": 720,
        "wires": []
    },
    {
        "id": "be4d60f3deb11380",
        "type": "debug",
        "z": "ed404996291d3ded",
        "name": "debug 35",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1700,
        "y": 720,
        "wires": []
    },
    {
        "id": "7c27dec090e8f320",
        "type": "influxdb in",
        "z": "ed404996291d3ded",
        "influxdb": "0504f462f986c487",
        "name": "influx_accelerometer",
        "query": "",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "myorg",
        "x": 1720,
        "y": 1340,
        "wires": [
            [
                "7ba7c82171431853",
                "d0a4f3c18182ee4e"
            ]
        ]
    },
    {
        "id": "f3f02569dba8e250",
        "type": "influxdb in",
        "z": "ed404996291d3ded",
        "influxdb": "0504f462f986c487",
        "name": "influx_cardiaque",
        "query": "",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "myorg",
        "x": 1680,
        "y": 760,
        "wires": [
            [
                "be4d60f3deb11380",
                "0d668210c6d9b0d1"
            ]
        ]
    },
    {
        "id": "9981306c33188658",
        "type": "ui_text",
        "z": "ed404996291d3ded",
        "group": "bc962b1e502fdd92",
        "order": 4,
        "width": "7",
        "height": "1",
        "name": "",
        "label": "Temps de conduite :",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 3520,
        "y": 180,
        "wires": []
    },
    {
        "id": "a9bccde7a97339d8",
        "type": "ui_text",
        "z": "ed404996291d3ded",
        "group": "bc962b1e502fdd92",
        "order": 4,
        "width": "7",
        "height": "1",
        "name": "",
        "label": "Temps de somnolence total :",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 3540,
        "y": 480,
        "wires": []
    },
    {
        "id": "c5ecbcda550ada7d",
        "type": "ui_text",
        "z": "ed404996291d3ded",
        "group": "bc962b1e502fdd92",
        "order": 4,
        "width": "7",
        "height": "1",
        "name": "",
        "label": "Temps de somnolance la plus longue :",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 3570,
        "y": 580,
        "wires": []
    },
    {
        "id": "31e07b02e92ebe47",
        "type": "ui_text",
        "z": "ed404996291d3ded",
        "group": "bc962b1e502fdd92",
        "order": 4,
        "width": "7",
        "height": "1",
        "name": "",
        "label": "Nombre de dérives :",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 3520,
        "y": 1440,
        "wires": []
    },
    {
        "id": "1f208e688fdd6873",
        "type": "ui_text",
        "z": "ed404996291d3ded",
        "group": "bc962b1e502fdd92",
        "order": 4,
        "width": "7",
        "height": "1",
        "name": "",
        "label": "Horaires où les somnolence ont été les plus courantes :",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 3630,
        "y": 380,
        "wires": []
    },
    {
        "id": "2e91625f303a2201",
        "type": "ui_chart",
        "z": "ed404996291d3ded",
        "name": "",
        "group": "161fc0b22611f508",
        "order": 1,
        "width": "12",
        "height": "5",
        "label": "Somnolence",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "Somnolence",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": "365",
        "removeOlderPoints": "",
        "removeOlderUnit": "86400",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#7300ff",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#ff0000",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "x": 3490,
        "y": 680,
        "wires": [
            []
        ]
    },
    {
        "id": "513022792c668345",
        "type": "ui_chart",
        "z": "ed404996291d3ded",
        "name": "",
        "group": "2d526cab482570ba",
        "order": 1,
        "width": "11",
        "height": "5",
        "label": "BPM",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "BPM",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": "365",
        "removeOlderPoints": "",
        "removeOlderUnit": "86400",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#ff0000",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#ff0000",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "x": 3470,
        "y": 900,
        "wires": [
            []
        ]
    },
    {
        "id": "497cc7c60269247b",
        "type": "ui_chart",
        "z": "ed404996291d3ded",
        "name": "",
        "group": "2d526cab482570ba",
        "order": 1,
        "width": "11",
        "height": "5",
        "label": "Variance",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "Variance",
        "dot": true,
        "ymin": "",
        "ymax": "",
        "removeOlder": "365",
        "removeOlderPoints": "",
        "removeOlderUnit": "86400",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#ff00f7",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#ff0000",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "x": 3480,
        "y": 1020,
        "wires": [
            []
        ]
    },
    {
        "id": "c0fe076b8533cb9a",
        "type": "link out",
        "z": "ed404996291d3ded",
        "name": "link out 1",
        "mode": "link",
        "links": [
            "3051c207a7d49b3e",
            "c552629d535ab089",
            "ad654747261209d9",
            "87d5fc621958312c",
            "1826fffac7eb7af0",
            "e2d409c4164d87d3",
            "c6fba70adc0fd0db",
            "371c5121c077dae6",
            "b320b39b1c5284aa",
            "ddd3840837213ca3",
            "6f5d00cc0cddcd47",
            "081ac20b9041ee6e",
            "e88aa50df9039985",
            "6852d8337b5c4108",
            "99d994c95a91f56c",
            "f5a16b9268c4bd58",
            "b9e2a1e8709753a8",
            "c1ff86b77b4be043",
            "bad5be7db201d717",
            "1030c48da0a6f1b3",
            "3019f2249d1acb55"
        ],
        "x": 1125,
        "y": 660,
        "wires": []
    },
    {
        "id": "b320b39b1c5284aa",
        "type": "link in",
        "z": "ed404996291d3ded",
        "name": "link in 1",
        "links": [
            "c0fe076b8533cb9a"
        ],
        "x": 3395,
        "y": 360,
        "wires": [
            [
                "1f208e688fdd6873"
            ]
        ]
    },
    {
        "id": "371c5121c077dae6",
        "type": "link in",
        "z": "ed404996291d3ded",
        "name": "link in 2",
        "links": [
            "c0fe076b8533cb9a"
        ],
        "x": 3395,
        "y": 460,
        "wires": [
            [
                "a9bccde7a97339d8"
            ]
        ]
    },
    {
        "id": "c6fba70adc0fd0db",
        "type": "link in",
        "z": "ed404996291d3ded",
        "name": "link in 3",
        "links": [
            "c0fe076b8533cb9a"
        ],
        "x": 3395,
        "y": 560,
        "wires": [
            [
                "c5ecbcda550ada7d"
            ]
        ]
    },
    {
        "id": "e2d409c4164d87d3",
        "type": "link in",
        "z": "ed404996291d3ded",
        "name": "link in 4",
        "links": [
            "c0fe076b8533cb9a"
        ],
        "x": 3395,
        "y": 660,
        "wires": [
            [
                "2e91625f303a2201"
            ]
        ]
    },
    {
        "id": "1826fffac7eb7af0",
        "type": "link in",
        "z": "ed404996291d3ded",
        "name": "link in 5",
        "links": [
            "c0fe076b8533cb9a"
        ],
        "x": 3395,
        "y": 880,
        "wires": [
            [
                "513022792c668345"
            ]
        ]
    },
    {
        "id": "87d5fc621958312c",
        "type": "link in",
        "z": "ed404996291d3ded",
        "name": "link in 6",
        "links": [
            "c0fe076b8533cb9a"
        ],
        "x": 3395,
        "y": 1000,
        "wires": [
            [
                "497cc7c60269247b"
            ]
        ]
    },
    {
        "id": "ad654747261209d9",
        "type": "link in",
        "z": "ed404996291d3ded",
        "name": "link in 7",
        "links": [
            "c0fe076b8533cb9a"
        ],
        "x": 3395,
        "y": 160,
        "wires": [
            [
                "9981306c33188658"
            ]
        ]
    },
    {
        "id": "c552629d535ab089",
        "type": "link in",
        "z": "ed404996291d3ded",
        "name": "link in 8",
        "links": [
            "c0fe076b8533cb9a"
        ],
        "x": 3395,
        "y": 1320,
        "wires": [
            [
                "ef06cd2e85c5ca2d"
            ]
        ]
    },
    {
        "id": "3051c207a7d49b3e",
        "type": "link in",
        "z": "ed404996291d3ded",
        "name": "link in 9",
        "links": [
            "c0fe076b8533cb9a"
        ],
        "x": 3395,
        "y": 1420,
        "wires": [
            [
                "31e07b02e92ebe47"
            ]
        ]
    },
    {
        "id": "9b9262a0b8bc1164",
        "type": "link in",
        "z": "ed404996291d3ded",
        "name": "link in 10",
        "links": [
            "0d668210c6d9b0d1"
        ],
        "x": 2315,
        "y": 380,
        "wires": [
            [
                "466064a18fa952a4"
            ]
        ]
    },
    {
        "id": "318b35e8705e3f17",
        "type": "link in",
        "z": "ed404996291d3ded",
        "name": "link in 11",
        "links": [
            "0d668210c6d9b0d1"
        ],
        "x": 2315,
        "y": 480,
        "wires": [
            [
                "c209b04d8876298f"
            ]
        ]
    },
    {
        "id": "be28b046bc4f13dd",
        "type": "link in",
        "z": "ed404996291d3ded",
        "name": "link in 12",
        "links": [
            "0d668210c6d9b0d1"
        ],
        "x": 2315,
        "y": 580,
        "wires": [
            [
                "06bdd82dd9bc56b6"
            ]
        ]
    },
    {
        "id": "4892167f1b10c094",
        "type": "link in",
        "z": "ed404996291d3ded",
        "name": "link in 13",
        "links": [
            "0d668210c6d9b0d1"
        ],
        "x": 1955,
        "y": 760,
        "wires": [
            [
                "38797788f6b75bb1"
            ]
        ]
    },
    {
        "id": "d7200af8396c4270",
        "type": "link in",
        "z": "ed404996291d3ded",
        "name": "link in 14",
        "links": [
            "0d668210c6d9b0d1"
        ],
        "x": 2315,
        "y": 1020,
        "wires": [
            [
                "c220fb837f10ecec"
            ]
        ]
    },
    {
        "id": "812e6c6c41ca41aa",
        "type": "link in",
        "z": "ed404996291d3ded",
        "name": "link in 15",
        "links": [
            "0d668210c6d9b0d1"
        ],
        "x": 2315,
        "y": 180,
        "wires": [
            [
                "2a6ec5c53c0965ec"
            ]
        ]
    },
    {
        "id": "0d668210c6d9b0d1",
        "type": "link out",
        "z": "ed404996291d3ded",
        "name": "link out 2",
        "mode": "link",
        "links": [
            "9b9262a0b8bc1164",
            "318b35e8705e3f17",
            "be28b046bc4f13dd",
            "4892167f1b10c094",
            "d7200af8396c4270",
            "812e6c6c41ca41aa"
        ],
        "x": 1825,
        "y": 760,
        "wires": []
    },
    {
        "id": "515e79ed6f5b7edb",
        "type": "link in",
        "z": "ed404996291d3ded",
        "name": "link in 16",
        "links": [
            "1be976bde64a6ddc"
        ],
        "x": 2315,
        "y": 680,
        "wires": [
            [
                "4b06fb50e1baf3bb"
            ]
        ]
    },
    {
        "id": "1be976bde64a6ddc",
        "type": "link out",
        "z": "ed404996291d3ded",
        "name": "link out 3",
        "mode": "link",
        "links": [
            "515e79ed6f5b7edb",
            "6acc44d91f02bad2"
        ],
        "x": 2165,
        "y": 760,
        "wires": []
    },
    {
        "id": "6acc44d91f02bad2",
        "type": "link in",
        "z": "ed404996291d3ded",
        "name": "link in 17",
        "links": [
            "1be976bde64a6ddc"
        ],
        "x": 2315,
        "y": 900,
        "wires": [
            [
                "6b2d9c8e5b3cc841",
                "c36933464ebc3bd0"
            ]
        ]
    },
    {
        "id": "46b7ac9ec1871222",
        "type": "link in",
        "z": "ed404996291d3ded",
        "name": "link in 18",
        "links": [
            "4db12aa6235a6764"
        ],
        "x": 2315,
        "y": 1340,
        "wires": [
            [
                "2b9760c2d215c9a1",
                "2bbcb14f640b0350"
            ]
        ]
    },
    {
        "id": "4db12aa6235a6764",
        "type": "link out",
        "z": "ed404996291d3ded",
        "name": "link out 4",
        "mode": "link",
        "links": [
            "46b7ac9ec1871222"
        ],
        "x": 2165,
        "y": 1340,
        "wires": []
    },
    {
        "id": "1752f8e7d82f5eb6",
        "type": "link in",
        "z": "ed404996291d3ded",
        "name": "link in 19",
        "links": [
            "d0a4f3c18182ee4e"
        ],
        "x": 2315,
        "y": 1440,
        "wires": [
            [
                "5fdf4ca7e76e76e6"
            ]
        ]
    },
    {
        "id": "d0a4f3c18182ee4e",
        "type": "link out",
        "z": "ed404996291d3ded",
        "name": "link out 5",
        "mode": "link",
        "links": [
            "1752f8e7d82f5eb6",
            "984a310e1d84bf63"
        ],
        "x": 1865,
        "y": 1340,
        "wires": []
    },
    {
        "id": "984a310e1d84bf63",
        "type": "link in",
        "z": "ed404996291d3ded",
        "name": "link in 20",
        "links": [
            "d0a4f3c18182ee4e"
        ],
        "x": 1955,
        "y": 1340,
        "wires": [
            [
                "ea73cbddbffcb53e"
            ]
        ]
    },
    {
        "id": "e613605e9b5b9f2c",
        "type": "ui_date_picker",
        "z": "ed404996291d3ded",
        "name": "",
        "label": "End Date",
        "group": "5e9e0664f4beef1c",
        "order": 0,
        "width": 0,
        "height": 0,
        "passthru": true,
        "topic": "topic",
        "topicType": "msg",
        "x": 200,
        "y": 1080,
        "wires": [
            [
                "57f125b300dfd999"
            ]
        ]
    },
    {
        "id": "51433edbad9c6370",
        "type": "ui_date_picker",
        "z": "ed404996291d3ded",
        "name": "",
        "label": "Start Date",
        "group": "ee595a02f54ae5d7",
        "order": 0,
        "width": "0",
        "height": "0",
        "passthru": true,
        "topic": "topic",
        "topicType": "msg",
        "x": 200,
        "y": 900,
        "wires": [
            [
                "ab3c516913b0667e"
            ]
        ]
    },
    {
        "id": "c8bc662e45738849",
        "type": "ui_text_input",
        "z": "ed404996291d3ded",
        "name": "",
        "label": "End Time",
        "tooltip": "",
        "group": "2b29f88d484ee446",
        "order": 0,
        "width": 0,
        "height": 0,
        "passthru": true,
        "mode": "time",
        "delay": 300,
        "topic": "topic",
        "topicType": "msg",
        "x": 200,
        "y": 1140,
        "wires": [
            [
                "7e81eba2e880a351"
            ]
        ]
    },
    {
        "id": "79f0ceac4bbeb48e",
        "type": "ui_text_input",
        "z": "ed404996291d3ded",
        "name": "",
        "label": "Start Time",
        "tooltip": "",
        "group": "ae91c12e7be508a2",
        "order": 0,
        "width": 0,
        "height": 0,
        "passthru": true,
        "mode": "time",
        "delay": 300,
        "topic": "topic",
        "topicType": "msg",
        "x": 210,
        "y": 960,
        "wires": [
            [
                "f2728ea205a11a76"
            ]
        ]
    },
    {
        "id": "fd0254d1718a7687",
        "type": "ui_button",
        "z": "ed404996291d3ded",
        "name": "",
        "group": "bea4d714d15a3d12",
        "order": 0,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Visualize",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 600,
        "y": 1020,
        "wires": [
            [
                "da967c424fa11b33"
            ]
        ]
    },
    {
        "id": "ab3c516913b0667e",
        "type": "function",
        "z": "ed404996291d3ded",
        "name": "save start date",
        "func": "flow.set(\"startDate\", msg.payload); // stocker la date\nreturn null; // ne pas envoyer de message",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 900,
        "wires": [
            []
        ]
    },
    {
        "id": "f2728ea205a11a76",
        "type": "function",
        "z": "ed404996291d3ded",
        "name": "save start time",
        "func": "flow.set(\"startTime\", msg.payload); // stocker l'heure\nreturn null; // ne pas envoyer de message",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 960,
        "wires": [
            []
        ]
    },
    {
        "id": "5a5fbdf6e07aa65f",
        "type": "function",
        "z": "ed404996291d3ded",
        "name": "get plage",
        "func": "const startDateMillis = flow.get(\"startDate\");\nconst startTimeMillis = flow.get(\"startTime\");\nconst endDateMillis = flow.get(\"endDate\");\nconst endTimeMillis = flow.get(\"endTime\");\n\n// Créer les objets Date\nlet startDate = new Date(startDateMillis);\nlet startTime = new Date(startTimeMillis);\nlet endDate = new Date(endDateMillis);\nlet endTime = new Date(endTimeMillis);\n\n// Ajuster l'heure de startDate et endDate avec l'heure de startTime et endTime\nstartDate.setHours(startTime.getHours()-1, startTime.getMinutes(), startTime.getSeconds(), startTime.getMilliseconds());\nendDate.setHours(endTime.getHours()-1, endTime.getMinutes(), endTime.getSeconds(), endTime.getMilliseconds());\n\n// Mettre à jour dans flow (conversion en secondes)\nflow.set(\"start\", Math.floor(startDate.getTime() / 1000));\nflow.set(\"end\", Math.floor(endDate.getTime() / 1000));\n\nmsg.payload = {\n    start: Math.floor(startDate.getTime() / 1000),\n    end: Math.floor(endDate.getTime() / 1000)\n};\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1140,
        "y": 780,
        "wires": [
            [
                "b6287f480353cf4a"
            ]
        ]
    },
    {
        "id": "b6287f480353cf4a",
        "type": "debug",
        "z": "ed404996291d3ded",
        "name": "debug 42",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1140,
        "y": 740,
        "wires": []
    },
    {
        "id": "57f125b300dfd999",
        "type": "function",
        "z": "ed404996291d3ded",
        "name": "save end date",
        "func": "flow.set(\"endDate\", msg.payload); // stocker la date\nreturn null; // ne pas envoyer de message",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 1080,
        "wires": [
            []
        ]
    },
    {
        "id": "7e81eba2e880a351",
        "type": "function",
        "z": "ed404996291d3ded",
        "name": "save end time",
        "func": "flow.set(\"endTime\", msg.payload); // stocker l'heure\nreturn null; // ne pas envoyer de message",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 1140,
        "wires": [
            []
        ]
    },
    {
        "id": "da967c424fa11b33",
        "type": "link out",
        "z": "ed404996291d3ded",
        "name": "link out 6",
        "mode": "link",
        "links": [
            "418600ccb7765671",
            "9549701618571c97",
            "91f32bf6118efbb4",
            "dfe43cd3f40e861f",
            "7339e58c344c4efe"
        ],
        "x": 705,
        "y": 1020,
        "wires": []
    },
    {
        "id": "8f4b34137c09fab2",
        "type": "delay",
        "z": "ed404996291d3ded",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 980,
        "y": 780,
        "wires": [
            [
                "5a5fbdf6e07aa65f"
            ]
        ]
    },
    {
        "id": "91f32bf6118efbb4",
        "type": "link in",
        "z": "ed404996291d3ded",
        "name": "link in 24",
        "links": [
            "da967c424fa11b33"
        ],
        "x": 885,
        "y": 780,
        "wires": [
            [
                "8f4b34137c09fab2"
            ]
        ]
    },
    {
        "id": "d44470ece9ecb920",
        "type": "delay",
        "z": "ed404996291d3ded",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 980,
        "y": 1020,
        "wires": [
            [
                "693d1b46748bd487",
                "d408acef9282edf2"
            ]
        ]
    },
    {
        "id": "dfe43cd3f40e861f",
        "type": "link in",
        "z": "ed404996291d3ded",
        "name": "link in 25",
        "links": [
            "da967c424fa11b33"
        ],
        "x": 885,
        "y": 1020,
        "wires": [
            [
                "d44470ece9ecb920"
            ]
        ]
    },
    {
        "id": "7339e58c344c4efe",
        "type": "link in",
        "z": "ed404996291d3ded",
        "name": "link in 26",
        "links": [
            "da967c424fa11b33"
        ],
        "x": 885,
        "y": 660,
        "wires": [
            [
                "71c7c433901741ed"
            ]
        ]
    },
    {
        "id": "ef06cd2e85c5ca2d",
        "type": "ui_chart",
        "z": "ed404996291d3ded",
        "name": "",
        "group": "161fc0b22611f508",
        "order": 1,
        "width": "12",
        "height": "5",
        "label": "Dérive",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "Somnolence",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": "1",
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#7300ff",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#ff0000",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "x": 3470,
        "y": 1340,
        "wires": [
            []
        ]
    },
    {
        "id": "0c4801864eb67567",
        "type": "ui_chart",
        "z": "ed404996291d3ded",
        "name": "",
        "group": "cb1319d38f752e0a",
        "order": 1,
        "width": "11",
        "height": "6",
        "label": "Somnolence",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "Somnolence",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": "365",
        "removeOlderPoints": "",
        "removeOlderUnit": "86400",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#7300ff",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#ff0000",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "x": 3490,
        "y": 740,
        "wires": [
            []
        ]
    },
    {
        "id": "ddd3840837213ca3",
        "type": "link in",
        "z": "ed404996291d3ded",
        "name": "link in 27",
        "links": [
            "c0fe076b8533cb9a"
        ],
        "x": 3395,
        "y": 720,
        "wires": [
            [
                "0c4801864eb67567"
            ]
        ]
    },
    {
        "id": "6f5d00cc0cddcd47",
        "type": "link in",
        "z": "ed404996291d3ded",
        "name": "link in 28",
        "links": [
            "c0fe076b8533cb9a"
        ],
        "x": 3395,
        "y": 1240,
        "wires": [
            [
                "4cf973c4c9383d56"
            ]
        ]
    },
    {
        "id": "4cf973c4c9383d56",
        "type": "ui_chart",
        "z": "ed404996291d3ded",
        "name": "",
        "group": "cb1319d38f752e0a",
        "order": 1,
        "width": "11",
        "height": "6",
        "label": "Dérive",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "Somnolence",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": "1",
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#7300ff",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#ff0000",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "x": 3470,
        "y": 1260,
        "wires": [
            []
        ]
    },
    {
        "id": "1d2b3a6b878a0bae",
        "type": "ui_text",
        "z": "ed404996291d3ded",
        "group": "1de00478ef66c8e4",
        "order": 4,
        "width": "7",
        "height": "1",
        "name": "",
        "label": "Temps de conduite :",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 3520,
        "y": 120,
        "wires": []
    },
    {
        "id": "081ac20b9041ee6e",
        "type": "link in",
        "z": "ed404996291d3ded",
        "name": "link in 29",
        "links": [
            "c0fe076b8533cb9a"
        ],
        "x": 3395,
        "y": 100,
        "wires": [
            [
                "1d2b3a6b878a0bae"
            ]
        ]
    },
    {
        "id": "282fbc4bb73564bd",
        "type": "ui_text",
        "z": "ed404996291d3ded",
        "group": "1de00478ef66c8e4",
        "order": 4,
        "width": "7",
        "height": "1",
        "name": "",
        "label": "Temps de somnolence total :",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 3540,
        "y": 440,
        "wires": []
    },
    {
        "id": "e88aa50df9039985",
        "type": "link in",
        "z": "ed404996291d3ded",
        "name": "link in 30",
        "links": [
            "c0fe076b8533cb9a"
        ],
        "x": 3395,
        "y": 420,
        "wires": [
            [
                "282fbc4bb73564bd"
            ]
        ]
    },
    {
        "id": "9bb132b33e29368b",
        "type": "ui_text",
        "z": "ed404996291d3ded",
        "group": "1de00478ef66c8e4",
        "order": 4,
        "width": "7",
        "height": "1",
        "name": "",
        "label": "Nombre de dérives :",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 3520,
        "y": 1400,
        "wires": []
    },
    {
        "id": "6852d8337b5c4108",
        "type": "link in",
        "z": "ed404996291d3ded",
        "name": "link in 31",
        "links": [
            "c0fe076b8533cb9a"
        ],
        "x": 3395,
        "y": 1380,
        "wires": [
            [
                "9bb132b33e29368b"
            ]
        ]
    },
    {
        "id": "f13290cc7fe25819",
        "type": "ui_button",
        "z": "ed404996291d3ded",
        "name": "",
        "group": "c5d2e4d132eac578",
        "order": 0,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Visualize",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 600,
        "y": 980,
        "wires": [
            [
                "da967c424fa11b33"
            ]
        ]
    },
    {
        "id": "bdb5c08f65ba5c96",
        "type": "ui_chart",
        "z": "ed404996291d3ded",
        "name": "",
        "group": "e431f4f4e0ad808a",
        "order": 1,
        "width": "11",
        "height": "5",
        "label": "Somnolence",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "Somnolence",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": "365",
        "removeOlderPoints": "",
        "removeOlderUnit": "86400",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#7300ff",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#ff0000",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "x": 3490,
        "y": 640,
        "wires": [
            []
        ]
    },
    {
        "id": "99d994c95a91f56c",
        "type": "link in",
        "z": "ed404996291d3ded",
        "name": "link in 32",
        "links": [
            "c0fe076b8533cb9a"
        ],
        "x": 3395,
        "y": 620,
        "wires": [
            [
                "bdb5c08f65ba5c96"
            ]
        ]
    },
    {
        "id": "c1ff86b77b4be043",
        "type": "link in",
        "z": "ed404996291d3ded",
        "name": "link in 35",
        "links": [
            "c0fe076b8533cb9a"
        ],
        "x": 3395,
        "y": 1160,
        "wires": [
            [
                "d00b2b4e702e8194"
            ]
        ]
    },
    {
        "id": "992c72c79cad7c59",
        "type": "ui_button",
        "z": "ed404996291d3ded",
        "name": "",
        "group": "7e423cde4281a7f2",
        "order": 0,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Visualize",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 600,
        "y": 940,
        "wires": [
            [
                "da967c424fa11b33"
            ]
        ]
    },
    {
        "id": "9fd7cbbad87ae462",
        "type": "join",
        "z": "ed404996291d3ded",
        "name": "",
        "mode": "auto",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "useparts": false,
        "accumulate": true,
        "timeout": "",
        "count": "",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 2810,
        "y": 780,
        "wires": [
            [
                "32704865b8900bb3",
                "55a2742dcede95cc"
            ]
        ]
    },
    {
        "id": "32704865b8900bb3",
        "type": "function",
        "z": "ed404996291d3ded",
        "name": "function_n",
        "func": "let payload = msg.payload;\nlet formattedPayload = \"\";\n\n// Parcourez les valeurs et ajoutez un saut de ligne toutes les 30 valeurs\nfor (let i = 0; i < payload.length; i++) {\n    formattedPayload += payload[i] + \" , \";\n\n    // Ajoutez un saut de ligne toutes les 30 valeurs\n    if ((i + 1) % 30 === 0) {\n        formattedPayload += \"\\n\";\n    }\n}\n\nmsg.payload = formattedPayload.trim(); // Supprimez les espaces et lignes inutiles\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2970,
        "y": 780,
        "wires": [
            [
                "d596591e88c7854f"
            ]
        ]
    },
    {
        "id": "55a2742dcede95cc",
        "type": "debug",
        "z": "ed404996291d3ded",
        "name": "debug 43",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2820,
        "y": 740,
        "wires": []
    },
    {
        "id": "c36933464ebc3bd0",
        "type": "function",
        "z": "ed404996291d3ded",
        "name": "function_split_cardiaque",
        "func": "// Convertir le timestamp en un format d'heure lisible\nlet timestamp = new Date(msg.payload._time); // Assurez-vous que msg.payload._time est en millisecondes\nlet hours = timestamp.getHours();\nlet minutes = timestamp.getMinutes();\n\n// Formater l'heure en ajoutant un zéro pour les minutes inférieures à 10\nlet formattedTime = hours + \"h\" + (minutes < 10 ? \"0\" + minutes : minutes);\n\n// Extraire la valeur et la convertir en nombre\nlet value = Number(msg.payload._value);\n\n// Construire le texte formaté avec la valeur et l'heure\nmsg.payload = `${value} : ${formattedTime}`;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2470,
        "y": 780,
        "wires": [
            [
                "9fd7cbbad87ae462",
                "bab2abe0d1137e1c"
            ]
        ]
    },
    {
        "id": "bab2abe0d1137e1c",
        "type": "debug",
        "z": "ed404996291d3ded",
        "name": "debug 44",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2520,
        "y": 740,
        "wires": []
    },
    {
        "id": "27eb92a3271c3021",
        "type": "ui_text",
        "z": "ed404996291d3ded",
        "group": "e431f4f4e0ad808a",
        "order": 4,
        "width": "23",
        "height": "10",
        "name": "",
        "label": "Variance DATA :",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "x": 3800,
        "y": 1060,
        "wires": []
    },
    {
        "id": "3019f2249d1acb55",
        "type": "link in",
        "z": "ed404996291d3ded",
        "name": "link in 37",
        "links": [
            "c0fe076b8533cb9a"
        ],
        "x": 3695,
        "y": 1040,
        "wires": [
            [
                "27eb92a3271c3021"
            ]
        ]
    },
    {
        "id": "5c51987e515ea99e",
        "type": "join",
        "z": "ed404996291d3ded",
        "name": "",
        "mode": "auto",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "useparts": false,
        "accumulate": true,
        "timeout": "",
        "count": "",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 3470,
        "y": 1060,
        "wires": [
            [
                "b478631959aec0dc"
            ]
        ]
    },
    {
        "id": "b478631959aec0dc",
        "type": "function",
        "z": "ed404996291d3ded",
        "name": "function_n",
        "func": "let payload = msg.payload;\nlet formattedPayload = \"\";\n\n// Parcourez les valeurs et ajoutez un saut de ligne toutes les 30 valeurs\nfor (let i = 0; i < payload.length; i++) {\n    formattedPayload += payload[i] + \" , \";\n\n    // Ajoutez un saut de ligne toutes les 30 valeurs\n    if ((i + 1) % 30 === 0) {\n        formattedPayload += \"\\n\";\n    }\n}\n\nmsg.payload = formattedPayload.trim(); // Supprimez les espaces et lignes inutiles\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3610,
        "y": 1060,
        "wires": [
            [
                "27eb92a3271c3021"
            ]
        ]
    },
    {
        "id": "ec3c45cca7564b51",
        "type": "function",
        "z": "ed404996291d3ded",
        "name": "function_split_cardiaque",
        "func": "// Convertir le timestamp en un format d'heure lisible\nlet timestamp = new Date(msg.payload._time); // Assurez-vous que msg.payload._time est en millisecondes\nlet hours = timestamp.getHours();\nlet minutes = timestamp.getMinutes();\n\n// Formater l'heure en ajoutant un zéro pour les minutes inférieures à 10\nlet formattedTime = hours + \"h\" + (minutes < 10 ? \"0\" + minutes : minutes);\n\n// Extraire la valeur et la convertir en nombre\nlet value = Number(msg.payload._value);\n\n// Construire le texte formaté avec la valeur et l'heure\nmsg.payload = `${value} : ${formattedTime}`;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3190,
        "y": 1060,
        "wires": [
            [
                "5c51987e515ea99e"
            ]
        ]
    },
    {
        "id": "1030c48da0a6f1b3",
        "type": "link in",
        "z": "ed404996291d3ded",
        "name": "link in 36",
        "links": [
            "c0fe076b8533cb9a"
        ],
        "x": 3385,
        "y": 780,
        "wires": [
            [
                "d596591e88c7854f"
            ]
        ]
    },
    {
        "id": "d596591e88c7854f",
        "type": "ui_text",
        "z": "ed404996291d3ded",
        "group": "e431f4f4e0ad808a",
        "order": 4,
        "width": "23",
        "height": "10",
        "name": "",
        "label": "BPM DATA :",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "x": 3490,
        "y": 780,
        "wires": []
    },
    {
        "id": "d00b2b4e702e8194",
        "type": "ui_text",
        "z": "ed404996291d3ded",
        "group": "e431f4f4e0ad808a",
        "order": 4,
        "width": "23",
        "height": "10",
        "name": "",
        "label": "Dérive DATA :",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "x": 3500,
        "y": 1180,
        "wires": []
    },
    {
        "id": "b8ee72a1235cc9be",
        "type": "function",
        "z": "ed404996291d3ded",
        "name": "function_n",
        "func": "let payload = msg.payload;\nlet formattedPayload = \"\";\n\n// Parcourez les valeurs et ajoutez un saut de ligne toutes les 30 valeurs\nfor (let i = 0; i < payload.length; i++) {\n    formattedPayload += payload[i] + \" , \";\n\n    // Ajoutez un saut de ligne toutes les 30 valeurs\n    if ((i + 1) % 30 === 0) {\n        formattedPayload += \"\\n\";\n    }\n}\n\nmsg.payload = formattedPayload.trim(); // Supprimez les espaces et lignes inutiles\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3090,
        "y": 1180,
        "wires": [
            [
                "d00b2b4e702e8194",
                "7ed4685bed36ca17"
            ]
        ]
    },
    {
        "id": "2bbcb14f640b0350",
        "type": "function",
        "z": "ed404996291d3ded",
        "name": "function_split_cardiaque",
        "func": "// Enregistrer le timestamp\nmsg.timestamp = msg.payload._time;\n\n// Vérifier si le champ est \"value_x\" et la valeur dépasse les seuils\nif (msg.payload._field === \"value_x\" && (msg.payload._value > 0.2 || msg.payload._value < -0.2)) {\n    let timestamp = new Date(msg.timestamp); // Assurez-vous que msg.timestamp est en millisecondes\n    let hours = timestamp.getHours();\n    let minutes = timestamp.getMinutes();\n    \n    // Formater l'heure en ajoutant un zéro si nécessaire\n    let formattedTime = hours + \"h\" + (minutes < 10 ? \"0\" + minutes : minutes);\n    \n    // Formater la sortie pour \"value_x\"\n    msg.payload = `${msg.payload._value} : ${formattedTime}`;\n    return msg;\n}\n\n// Vérifier si le champ est \"value_y\" et la valeur dépasse les seuils\nif (msg.payload._field === \"value_y\" && (msg.payload._value > 0.3 || msg.payload._value < -0.3)) {\n    let timestamp = new Date(msg.timestamp); // Assurez-vous que msg.timestamp est en millisecondes\n    let hours = timestamp.getHours();\n    let minutes = timestamp.getMinutes();\n    \n    // Formater l'heure en ajoutant un zéro si nécessaire\n    let formattedTime = hours + \"h\" + (minutes < 10 ? \"0\" + minutes : minutes);\n    \n    // Formater la sortie pour \"value_y\"\n    msg.payload = `${msg.payload._value} : ${formattedTime}`;\n    return msg;\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2690,
        "y": 1180,
        "wires": [
            [
                "4d057bdfdcd1a288",
                "b8ee72a1235cc9be"
            ]
        ]
    },
    {
        "id": "4d057bdfdcd1a288",
        "type": "debug",
        "z": "ed404996291d3ded",
        "name": "debug 45",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2760,
        "y": 1140,
        "wires": []
    },
    {
        "id": "7ed4685bed36ca17",
        "type": "debug",
        "z": "ed404996291d3ded",
        "name": "debug 46",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 3120,
        "y": 1140,
        "wires": []
    }
]