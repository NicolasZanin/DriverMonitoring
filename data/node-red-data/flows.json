[
    {
        "id": "7d33f045adfa2ce5",
        "type": "tab",
        "label": "Flux 1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "0504f462f986c487",
        "type": "influxdb",
        "hostname": "127.0.0.1",
        "port": "8086",
        "protocol": "http",
        "database": "database",
        "name": "influx_in",
        "usetls": false,
        "tls": "",
        "influxdbVersion": "2.0",
        "url": "http://influxdb:8086",
        "timeout": "10",
        "rejectUnauthorized": false
    },
    {
        "id": "f02c2e29ba92c8ca",
        "type": "ui_base",
        "theme": {
            "name": "theme-light",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "base-color": {
                    "default": "#0094CE",
                    "value": "#0094CE",
                    "edited": false
                },
                "page-titlebar-backgroundColor": {
                    "value": "#0094CE",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#fafafa",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#1bbfff",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#111111",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#0094ce",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey",
                "palette": "light"
            }
        },
        "site": {
            "name": "Node-RED Dashboard",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "lockMenu": "false",
            "allowTempTheme": "true",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "26b1797a2f299d3c",
        "type": "ui_tab",
        "name": "Blinky Driver",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "bc962b1e502fdd92",
        "type": "ui_group",
        "name": "Donn√©es",
        "tab": "26b1797a2f299d3c",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "2d526cab482570ba",
        "type": "ui_group",
        "name": "Collomne 1",
        "tab": "26b1797a2f299d3c",
        "order": 2,
        "disp": false,
        "width": "20",
        "collapse": false,
        "className": ""
    },
    {
        "id": "161fc0b22611f508",
        "type": "ui_group",
        "name": "Collomne 2",
        "tab": "26b1797a2f299d3c",
        "order": 3,
        "disp": false,
        "width": "20",
        "collapse": false,
        "className": ""
    },
    {
        "id": "3932fb80003a0cc6",
        "type": "http in",
        "z": "7d33f045adfa2ce5",
        "name": "http_cardiaque",
        "url": "/app/cardiaque/:valuec/:time",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 180,
        "y": 180,
        "wires": [
            [
                "80dfcfd3f6475bfe"
            ]
        ]
    },
    {
        "id": "80dfcfd3f6475bfe",
        "type": "function",
        "z": "7d33f045adfa2ce5",
        "name": "function_cardiaque",
        "func": "let valueC = Number(msg.req.params.valuec);\nlet time = msg.req.params.time;\n\nmsg.payload = {\n    value: valueC,\n    time: time\n};\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 180,
        "wires": [
            [
                "ce003374eaa7783a",
                "0ee71603d9dc2bbf"
            ]
        ]
    },
    {
        "id": "ce003374eaa7783a",
        "type": "debug",
        "z": "7d33f045adfa2ce5",
        "name": "debug_cardiaque",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 770,
        "y": 120,
        "wires": []
    },
    {
        "id": "af0aaa9bdcef7077",
        "type": "http in",
        "z": "7d33f045adfa2ce5",
        "name": "http_accelerometer",
        "url": "/app/accelerometer/:x/:y/:z/:time",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 190,
        "y": 440,
        "wires": [
            [
                "2a3b84b9e454c694"
            ]
        ]
    },
    {
        "id": "2a3b84b9e454c694",
        "type": "function",
        "z": "7d33f045adfa2ce5",
        "name": "function_accelerometer",
        "func": "let x = Number(msg.req.params.x);\nlet y = Number(msg.req.params.y);\nlet z = Number(msg.req.params.z);\nlet time = msg.req.params.time;\n\nmsg.payload = {\n    value_x: x,\n    value_y: y,\n    value_z: z,\n    time: time\n};\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1170,
        "y": 440,
        "wires": [
            [
                "8987dda3253a708a",
                "b836ff4cbe949f16",
                "9f8fb2ff54ca0948"
            ]
        ]
    },
    {
        "id": "8987dda3253a708a",
        "type": "debug",
        "z": "7d33f045adfa2ce5",
        "name": "debug_accelerometer",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1520,
        "y": 580,
        "wires": []
    },
    {
        "id": "591fb441b02385cd",
        "type": "http in",
        "z": "7d33f045adfa2ce5",
        "name": "Http_Home",
        "url": "/app",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 160,
        "y": 520,
        "wires": [
            [
                "e38e0d798e5fc06a"
            ]
        ]
    },
    {
        "id": "c7d1bcaa5d6270f8",
        "type": "http response",
        "z": "7d33f045adfa2ce5",
        "name": "http_out",
        "statusCode": "200",
        "headers": {},
        "x": 700,
        "y": 520,
        "wires": []
    },
    {
        "id": "22b77ab847911bf2",
        "type": "http response",
        "z": "7d33f045adfa2ce5",
        "name": "http_out",
        "statusCode": "200",
        "headers": {},
        "x": 1740,
        "y": 440,
        "wires": []
    },
    {
        "id": "9f8fb2ff54ca0948",
        "type": "function",
        "z": "7d33f045adfa2ce5",
        "name": "function 1",
        "func": "msg.payload = \"accelerometer;\" + msg.payload.time;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1460,
        "y": 440,
        "wires": [
            [
                "22b77ab847911bf2"
            ]
        ]
    },
    {
        "id": "e38e0d798e5fc06a",
        "type": "function",
        "z": "7d33f045adfa2ce5",
        "name": "function_Home",
        "func": "msg.payload = \"ok\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 520,
        "wires": [
            [
                "07385d52738bc212",
                "c7d1bcaa5d6270f8"
            ]
        ]
    },
    {
        "id": "07385d52738bc212",
        "type": "debug",
        "z": "7d33f045adfa2ce5",
        "name": "debug_Home",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 720,
        "y": 560,
        "wires": []
    },
    {
        "id": "24ea63205d85fc42",
        "type": "http in",
        "z": "7d33f045adfa2ce5",
        "name": "http_accelerometer2",
        "url": "/app/accelerometer/:value",
        "method": "get",
        "upload": true,
        "swaggerDoc": "",
        "x": 190,
        "y": 240,
        "wires": [
            [
                "bd0a2c1a516ff98a"
            ]
        ]
    },
    {
        "id": "b131c8da435b513a",
        "type": "split",
        "z": "7d33f045adfa2ce5",
        "name": "",
        "splt": "b",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "property": "payload",
        "x": 750,
        "y": 240,
        "wires": [
            [
                "309578c133f67608"
            ]
        ]
    },
    {
        "id": "bd0a2c1a516ff98a",
        "type": "function",
        "z": "7d33f045adfa2ce5",
        "name": "function_accelerometer",
        "func": "msg.payload = msg.req.params.value;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 240,
        "wires": [
            [
                "b131c8da435b513a"
            ]
        ]
    },
    {
        "id": "309578c133f67608",
        "type": "function",
        "z": "7d33f045adfa2ce5",
        "name": "function 2",
        "func": "if (msg.payload != \"\") {\n    let splitValue = msg.payload.split(':');\n    msg.payload = splitValue;\n}\nelse {\n    msg.payload = \"\";\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 940,
        "y": 240,
        "wires": [
            [
                "97d7221dd416e070",
                "b3dc753b3ee2c66c"
            ]
        ]
    },
    {
        "id": "97d7221dd416e070",
        "type": "function",
        "z": "7d33f045adfa2ce5",
        "name": "function 3",
        "func": "if (msg.payload != \"\") {\n    msg.payload = \"accelerometer;\" +msg.payload[3];\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1120,
        "y": 240,
        "wires": [
            [
                "62db381517c73141"
            ]
        ]
    },
    {
        "id": "62db381517c73141",
        "type": "join",
        "z": "7d33f045adfa2ce5",
        "name": "",
        "mode": "auto",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "a",
        "joinerType": "str",
        "useparts": false,
        "accumulate": false,
        "timeout": "",
        "count": "",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "num",
        "reduceFixup": "",
        "x": 1450,
        "y": 240,
        "wires": [
            [
                "423db6665f468301"
            ]
        ]
    },
    {
        "id": "b3dc753b3ee2c66c",
        "type": "function",
        "z": "7d33f045adfa2ce5",
        "name": "function 4",
        "func": "if (msg.payload != \"\") {\n    msg.payload = {\n        value_x: Number(msg.payload[0]),\n        value_y: Number(msg.payload[1]),\n        value_z: Number(msg.payload[2]),\n        time: msg.payload[3]\n    };\n}\nelse {\n    msg.payload = \"\";\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1120,
        "y": 360,
        "wires": [
            [
                "b836ff4cbe949f16"
            ]
        ]
    },
    {
        "id": "423db6665f468301",
        "type": "http response",
        "z": "7d33f045adfa2ce5",
        "name": "http_out",
        "statusCode": "201",
        "headers": {},
        "x": 1760,
        "y": 240,
        "wires": []
    },
    {
        "id": "fb7dca0f36671644",
        "type": "inject",
        "z": "7d33f045adfa2ce5",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 350,
        "y": 1520,
        "wires": [
            [
                "7dca89de491edd46",
                "e1c31245a0acc885",
                "c81067bee884d8c0"
            ]
        ]
    },
    {
        "id": "2b646f6235241c25",
        "type": "split",
        "z": "7d33f045adfa2ce5",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "property": "payload",
        "x": 1130,
        "y": 1220,
        "wires": [
            [
                "8132af8be8e785c7",
                "bb85ebd4823d8ad7",
                "5b02577af6df67b7"
            ]
        ]
    },
    {
        "id": "8132af8be8e785c7",
        "type": "debug",
        "z": "7d33f045adfa2ce5",
        "name": "debug 3",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1140,
        "y": 1180,
        "wires": []
    },
    {
        "id": "1c6d6cc6bd373b39",
        "type": "debug",
        "z": "7d33f045adfa2ce5",
        "name": "debug 9",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1540,
        "y": 1180,
        "wires": []
    },
    {
        "id": "1c2fa474404d7a42",
        "type": "debug",
        "z": "7d33f045adfa2ce5",
        "name": "debug 11",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1500,
        "y": 1320,
        "wires": []
    },
    {
        "id": "05fe86f94fb83aa3",
        "type": "function",
        "z": "7d33f045adfa2ce5",
        "name": "diviser par minute",
        "func": "let data = msg.payload;\nlet groups = {};\n\n// Fonction pour arrondir l'heure √† la minute la plus proche divisible par 5\nfunction roundTo5Minutes(time) {\n    // Extraire l'heure et les minutes\n    let date = new Date(time);\n    let minutes = date.getMinutes();\n    // Arrondir aux multiples de 5 minutes\n    let roundedMinutes = Math.floor(minutes / 5) * 5;\n    date.setMinutes(roundedMinutes);\n    date.setSeconds(0);\n    date.setMilliseconds(0);\n    return date.toISOString().substring(0, 16); // Retourne le timestamp au format \"YYYY-MM-DDTHH:mm\"\n}\n\n// Grouper les donn√©es par intervalle de 5 minutes\ndata.forEach(item => {\n    // Extraire la minute arrondie\n    let roundedMinute = roundTo5Minutes(item._time);\n\n    // Si cette minute n'existe pas encore dans le groupe, l'ajouter\n    if (!groups[roundedMinute]) {\n        groups[roundedMinute] = [];\n    }\n\n    // Ajouter la donn√©e √† l'intervalle appropri√©\n    groups[roundedMinute].push(item);\n});\n\n// Envoyer les groupes\nmsg.payload = groups;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1170,
        "y": 1360,
        "wires": [
            [
                "8e2b1587b208ea7a",
                "f0ebccd0ca8002d2"
            ]
        ]
    },
    {
        "id": "8e2b1587b208ea7a",
        "type": "debug",
        "z": "7d33f045adfa2ce5",
        "name": "debug 10",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1200,
        "y": 1320,
        "wires": []
    },
    {
        "id": "f0ebccd0ca8002d2",
        "type": "function",
        "z": "7d33f045adfa2ce5",
        "name": "function_variance",
        "func": "// La variable msg.payload contient l'objet avec des timestamps et des donn√©es\nlet result = [];\n\n// Parcourir chaque timestamp dans msg.payload\nfor (let timestamp in msg.payload) {\n    let arrayData = msg.payload[timestamp];  // Le tableau de donn√©es pour ce timestamp\n\n    // Initialisation des variables pour les calculs min et max\n    let minVal = Infinity;\n    let maxVal = -Infinity;\n    let minTimestamp = null;\n\n    // Trouver la valeur minimale et maximale dans le tableau\n    arrayData.forEach(entry => {\n        let value = entry._value;\n        let entryTimestamp = entry._time;\n\n        // Mise √† jour de la valeur minimale et maximale\n        if (value < minVal) {\n            minVal = value;\n            minTimestamp = entryTimestamp;  // Sauvegarder le timestamp de la valeur minimale\n        }\n        if (value > maxVal) {\n            maxVal = value;\n        }\n    });\n\n    // Calculer la diff√©rence absolue entre max et min\n    let diff = Math.abs(maxVal - minVal);\n\n    // Si la diff√©rence est sup√©rieure √† 15, on cr√©e un point avec payload et timestamp\n    if (diff > 15) {\n        result.push({\n            _value: diff,\n            _time: minTimestamp  // Utiliser le timestamp de la valeur minimale\n        });\n    }\n}\n\n// Retourner le tableau r√©sultat comme payload\nmsg.payload = result;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1470,
        "y": 1360,
        "wires": [
            [
                "1c2fa474404d7a42",
                "89b1cc43dcd30f04"
            ]
        ]
    },
    {
        "id": "89b1cc43dcd30f04",
        "type": "split",
        "z": "7d33f045adfa2ce5",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "property": "payload",
        "x": 1710,
        "y": 1360,
        "wires": [
            [
                "323ad185df70c6ca",
                "8e44189e9ded9552"
            ]
        ]
    },
    {
        "id": "323ad185df70c6ca",
        "type": "debug",
        "z": "7d33f045adfa2ce5",
        "name": "debug 12",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1700,
        "y": 1320,
        "wires": []
    },
    {
        "id": "2acdf17dfa50ab91",
        "type": "debug",
        "z": "7d33f045adfa2ce5",
        "name": "debug 13",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2000,
        "y": 1320,
        "wires": []
    },
    {
        "id": "bb85ebd4823d8ad7",
        "type": "function",
        "z": "7d33f045adfa2ce5",
        "name": "function_split_cardiaque",
        "func": "msg.timestamp = msg.payload._time;\nmsg.payload = Number(msg.payload._value);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1490,
        "y": 1220,
        "wires": [
            [
                "1c6d6cc6bd373b39",
                "18aba2a375c55cbd"
            ]
        ]
    },
    {
        "id": "8e44189e9ded9552",
        "type": "function",
        "z": "7d33f045adfa2ce5",
        "name": "function_split_variance",
        "func": "msg.timestamp = msg.payload._time;\nmsg.payload = Number(msg.payload._value);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1940,
        "y": 1360,
        "wires": [
            [
                "2acdf17dfa50ab91",
                "b63f1b55ee1e71df"
            ]
        ]
    },
    {
        "id": "d3f4bd9e863a4853",
        "type": "function",
        "z": "7d33f045adfa2ce5",
        "name": "temps de conduite",
        "func": "let data = msg.payload;\n\n// Trouver le timestamp le plus ancien et le plus r√©cent dans l'ensemble du tableau\nlet oldestTimestamp = new Date(data[0]._time).getTime() / 1000;  // Conversion en secondes\nlet newestTimestamp = new Date(data[0]._time).getTime() / 1000;  // Conversion en secondes\n\ndata.forEach(item => {\n    let currentTimestamp = new Date(item._time).getTime() / 1000;  // Conversion en secondes\n    if (currentTimestamp < oldestTimestamp) {\n        oldestTimestamp = currentTimestamp;\n    }\n    if (currentTimestamp > newestTimestamp) {\n        newestTimestamp = currentTimestamp;\n    }\n});\n\n// Calculer la diff√©rence de temps en secondes directement\nlet timeDifferenceSec = newestTimestamp - oldestTimestamp;\n\n// Convertir la diff√©rence en heures et minutes\nlet hours = Math.floor(timeDifferenceSec / 3600);  // Obtenir le nombre d'heures\nlet minutes = Math.floor((timeDifferenceSec % 3600) / 60);  // Obtenir le reste en minutes\n\n// Formater en HH:MM\nlet formattedTimeDifference = `${String(hours).padStart(2, '0')}:${String(minutes).padStart(2, '0')}`;\n\n// Retourner le message format√©\nmsg.payload = formattedTimeDifference;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1170,
        "y": 1460,
        "wires": [
            [
                "b7b4fa8cd0ac52ff",
                "3483d8448d95b648"
            ]
        ]
    },
    {
        "id": "3483d8448d95b648",
        "type": "debug",
        "z": "7d33f045adfa2ce5",
        "name": "debug 14",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1320,
        "y": 1420,
        "wires": []
    },
    {
        "id": "7dca89de491edd46",
        "type": "function",
        "z": "7d33f045adfa2ce5",
        "name": "function_query_accelerometer",
        "func": "msg = {\n    payload: 'from(bucket: \"mybucket\")\\n' +\n             '|> range(start: 2024-10-23)\\n' +\n             '|> filter(fn: (r) => r[\"_measurement\"] == \"accelerometer\")'\n}\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 1800,
        "wires": [
            [
                "d7ed8f552e23e9b6",
                "ca53f4b9ec04e2f8"
            ]
        ]
    },
    {
        "id": "2071d3ec60d7a365",
        "type": "split",
        "z": "7d33f045adfa2ce5",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "property": "payload",
        "x": 1130,
        "y": 1800,
        "wires": [
            [
                "c2dd441c3b5be4d0",
                "0286cc355838c4b2"
            ]
        ]
    },
    {
        "id": "ca53f4b9ec04e2f8",
        "type": "debug",
        "z": "7d33f045adfa2ce5",
        "name": "debug 15",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 740,
        "y": 1760,
        "wires": []
    },
    {
        "id": "e7706dd2dc420924",
        "type": "debug",
        "z": "7d33f045adfa2ce5",
        "name": "debug 16",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 960,
        "y": 1760,
        "wires": []
    },
    {
        "id": "c2dd441c3b5be4d0",
        "type": "debug",
        "z": "7d33f045adfa2ce5",
        "name": "debug 17",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1140,
        "y": 1760,
        "wires": []
    },
    {
        "id": "0286cc355838c4b2",
        "type": "function",
        "z": "7d33f045adfa2ce5",
        "name": "function_split_cardiaque",
        "func": "msg.timestamp = msg.payload._time;\n\nif (msg.payload._field === \"value_x\" && (msg.payload._value > 0.2 || msg.payload._value < -0.2)) {\n    msg.payload = msg.payload._value;\n    return msg;\n}\n\nif (msg.payload._field === \"value_y\" && (msg.payload._value > 0.3 || msg.payload._value < -0.3)) {\n    msg.payload = msg.payload._value;\n    return msg;\n}\n\nreturn null;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1490,
        "y": 1800,
        "wires": [
            [
                "7441eb84e45b9f5c",
                "4a860546a03c9abd"
            ]
        ]
    },
    {
        "id": "7441eb84e45b9f5c",
        "type": "debug",
        "z": "7d33f045adfa2ce5",
        "name": "debug 18",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1540,
        "y": 1760,
        "wires": []
    },
    {
        "id": "e1c31245a0acc885",
        "type": "function",
        "z": "7d33f045adfa2ce5",
        "name": "function_reset",
        "func": "msg.payload = [];\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 1500,
        "wires": [
            [
                "c244ced9a5c0394e",
                "18aba2a375c55cbd",
                "b63f1b55ee1e71df",
                "4a860546a03c9abd",
                "89c694a863d8f045",
                "9edfefe0b00502db",
                "3ce76782794fa0b9",
                "09bfd8172f93e5e2"
            ]
        ]
    },
    {
        "id": "5b02577af6df67b7",
        "type": "function",
        "z": "7d33f045adfa2ce5",
        "name": "function_somnolence",
        "func": "msg.timestamp = msg.payload._time;\nmsg.payload = (Number(msg.payload._value) < 60) ? 1 : 0;  // 1 si en somnolence, sinon 0\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1500,
        "y": 1040,
        "wires": [
            [
                "d22311564d4cfadb",
                "c244ced9a5c0394e"
            ]
        ]
    },
    {
        "id": "d22311564d4cfadb",
        "type": "debug",
        "z": "7d33f045adfa2ce5",
        "name": "debug 8",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1540,
        "y": 1000,
        "wires": []
    },
    {
        "id": "314cc303c41e5536",
        "type": "function",
        "z": "7d33f045adfa2ce5",
        "name": "function_somnolence_max",
        "func": "// Assumed that msg.payload is the array of data\nlet somnolenceData = msg.payload;\n\nlet somnolencePeriods = []; // No type annotations in JavaScript\nlet currentStartTime = null;\n\nfor (let i = 0; i < somnolenceData.length; i++) {\n    let dataPoint = somnolenceData[i];\n\n    if (dataPoint._value < 60) {\n        // If we are in a sleep period, start or continue it\n        if (currentStartTime === null) {\n            currentStartTime = new Date(dataPoint._time); // Starting the somnolence period\n        }\n    } else {\n        // If somnolence ends, record the period\n        if (currentStartTime !== null) {\n            let endTime = new Date(dataPoint._time);\n            let durationInSeconds = (endTime.getTime() - currentStartTime.getTime()) / 1000; // Duration in seconds\n            somnolencePeriods.push({\n                startTime: currentStartTime,\n                endTime: endTime,\n                duration: durationInSeconds\n            });\n            currentStartTime = null;\n        }\n    }\n}\n\n// Handle the case where the somnolence period ends at the last data point\nif (currentStartTime !== null) {\n    let endTime = new Date(somnolenceData[somnolenceData.length - 1]._time);\n    let durationInSeconds = (endTime.getTime() - currentStartTime.getTime()) / 1000;\n    somnolencePeriods.push({\n        startTime: currentStartTime,\n        endTime: endTime,\n        duration: durationInSeconds\n    });\n}\n\n// Find the longest somnolence period\nlet longestSleepPeriod = somnolencePeriods.reduce((max, current) => {\n    return current.duration > max.duration ? current : max;\n}, { duration: 0 });\n\n// Assuming longestSleepPeriod.duration is in seconds\nlet durationInSeconds = longestSleepPeriod.duration;\n\n// Calculate hours and minutes\nlet hours = Math.floor(durationInSeconds / 3600); // 1 hour = 3600 seconds\nlet minutes = Math.floor((durationInSeconds % 3600) / 60); // 1 minute = 60 seconds\n\n// Format as HH:MM\nlet formattedDuration = `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}`;\n\nreturn {\n    payload: formattedDuration\n};\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1220,
        "y": 940,
        "wires": [
            [
                "89c694a863d8f045",
                "3de7096886fc7f3c"
            ]
        ]
    },
    {
        "id": "3de7096886fc7f3c",
        "type": "debug",
        "z": "7d33f045adfa2ce5",
        "name": "debug 5",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1280,
        "y": 900,
        "wires": []
    },
    {
        "id": "a5a6f2f2a7a88dae",
        "type": "function",
        "z": "7d33f045adfa2ce5",
        "name": "function_somnolence_total",
        "func": "// Assumed that msg.payload is the array of data\nlet somnolenceData = msg.payload;\n\nlet totalSomnolenceDuration = 0; // Initialize total somnolence time in seconds\nlet currentStartTime = null;\n\nfor (let i = 0; i < somnolenceData.length; i++) {\n    let dataPoint = somnolenceData[i];\n\n    if (dataPoint._value < 60) {\n        // If we are in a sleep period, start or continue it\n        if (currentStartTime === null) {\n            currentStartTime = new Date(dataPoint._time); // Starting the somnolence period\n        }\n    } else {\n        // If somnolence ends, record the period\n        if (currentStartTime !== null) {\n            let endTime = new Date(dataPoint._time);\n            let durationInSeconds = (endTime.getTime() - currentStartTime.getTime()) / 1000; // Duration in seconds\n            totalSomnolenceDuration += durationInSeconds; // Add duration to the total\n            currentStartTime = null;\n        }\n    }\n}\n\n// Handle the case where the somnolence period ends at the last data point\nif (currentStartTime !== null) {\n    let endTime = new Date(somnolenceData[somnolenceData.length - 1]._time);\n    let durationInSeconds = (endTime.getTime() - currentStartTime.getTime()) / 1000;\n    totalSomnolenceDuration += durationInSeconds; // Add duration to the total\n}\n\n// Calculate hours and minutes for the total somnolence time\nlet hours = Math.floor(totalSomnolenceDuration / 3600); // 1 hour = 3600 seconds\nlet minutes = Math.floor((totalSomnolenceDuration % 3600) / 60); // 1 minute = 60 seconds\n\n// Format as HH:MM\nlet formattedDuration = `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}`;\n\nreturn {\n    payload: formattedDuration\n};",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1220,
        "y": 820,
        "wires": [
            [
                "9edfefe0b00502db",
                "b163b680656b5dee"
            ]
        ]
    },
    {
        "id": "12888b2a5e1b9ae3",
        "type": "function",
        "z": "7d33f045adfa2ce5",
        "name": "function_somnolence_frequent",
        "func": "// Assumed that msg.payload is the array of data\nlet somnolenceData = msg.payload;\n\n// Initialize a map to store somnolence counts for each hour (0 to 23)\nlet somnolenceByHour = Array(24).fill(0);\n\nfor (let i = 0; i < somnolenceData.length; i++) {\n    let dataPoint = somnolenceData[i];\n\n    if (dataPoint._value < 60) {\n        // If somnolence is detected, get the hour from the timestamp\n        let timestamp = new Date(dataPoint._time);\n        let hour = timestamp.getHours(); // Extract the hour from the timestamp\n        somnolenceByHour[hour] += 1; // Increment the count for this hour\n    }\n}\n\n// Find the hour with the most frequent somnolence\nlet mostCommonHour = somnolenceByHour.reduce((max, count, index) => {\n    return count > max.count ? { hour: index, count: count } : max;\n}, { hour: -1, count: 0 });\n\n// Format the hour into HH:00 (e.g., \"08:00\" for 8 AM)\nlet formattedHour = `${mostCommonHour.hour.toString().padStart(2, '0')}:00`;\n\nreturn {\n    payload: formattedHour\n};",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1230,
        "y": 720,
        "wires": [
            [
                "34321679355a50fc",
                "3ce76782794fa0b9"
            ]
        ]
    },
    {
        "id": "b163b680656b5dee",
        "type": "debug",
        "z": "7d33f045adfa2ce5",
        "name": "debug 6",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1280,
        "y": 780,
        "wires": []
    },
    {
        "id": "34321679355a50fc",
        "type": "debug",
        "z": "7d33f045adfa2ce5",
        "name": "debug 7",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1280,
        "y": 680,
        "wires": []
    },
    {
        "id": "0a90a7a026c1847f",
        "type": "function",
        "z": "7d33f045adfa2ce5",
        "name": "function_count_d√©rive",
        "func": "// Initialize a variable to count the number of derivatives\nlet derivativeCount = 0;\n\n// Iterate through each item in the payload\nfor (let i = 0; i < msg.payload.length; i++) {\n    let dataPoint = msg.payload[i];  // Get the current data point\n\n    // Check for \"value_x\" field and the specified condition\n    if (dataPoint._field === \"value_x\" && (dataPoint._value > 0.2 || dataPoint._value < -0.2)) {\n        derivativeCount += 1;  // Increment the derivative count for \"value_x\"\n    }\n\n    // Check for \"value_y\" field and the specified condition\n    if (dataPoint._field === \"value_y\" && (dataPoint._value > 0.3 || dataPoint._value < -0.3)) {\n        derivativeCount += 1;  // Increment the derivative count for \"value_y\"\n    }\n}\n\n// Return the count of derivatives\nreturn {\n    payload: derivativeCount\n};",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1180,
        "y": 1920,
        "wires": [
            [
                "09bfd8172f93e5e2"
            ]
        ]
    },
    {
        "id": "c81067bee884d8c0",
        "type": "function",
        "z": "7d33f045adfa2ce5",
        "name": "function_query_cardiaque",
        "func": "msg = {\n    payload: 'from(bucket: \"mybucket\")\\n' +\n        '|> range(start: 2024-10-23)\\n' +\n        '|> filter(fn: (r) => r[\"_measurement\"] == \"cardiaque\")'\n}\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 1220,
        "wires": [
            [
                "07e0c2da0cdde893",
                "f09cec024961d734"
            ]
        ]
    },
    {
        "id": "f09cec024961d734",
        "type": "debug",
        "z": "7d33f045adfa2ce5",
        "name": "debug 1",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 740,
        "y": 1180,
        "wires": []
    },
    {
        "id": "3c31b3496d099292",
        "type": "debug",
        "z": "7d33f045adfa2ce5",
        "name": "debug 2",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 960,
        "y": 1180,
        "wires": []
    },
    {
        "id": "0ee71603d9dc2bbf",
        "type": "influxdb out",
        "z": "7d33f045adfa2ce5",
        "influxdb": "0504f462f986c487",
        "name": "influx_cardiaque",
        "measurement": "cardiaque",
        "precision": "",
        "retentionPolicy": "",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "myorg",
        "bucket": "mybucket",
        "x": 760,
        "y": 180,
        "wires": []
    },
    {
        "id": "b836ff4cbe949f16",
        "type": "influxdb out",
        "z": "7d33f045adfa2ce5",
        "influxdb": "0504f462f986c487",
        "name": "influx_accelerometer",
        "measurement": "accelerometer",
        "precision": "",
        "retentionPolicy": "",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "myorg",
        "bucket": "mybucket",
        "x": 1500,
        "y": 360,
        "wires": []
    },
    {
        "id": "d7ed8f552e23e9b6",
        "type": "influxdb in",
        "z": "7d33f045adfa2ce5",
        "influxdb": "0504f462f986c487",
        "name": "influx_accelerometer",
        "query": "from(bucket: \"mybucket\")\n  |> range(start: 2024-10-23, stop: 2024-10-24)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"accelerometer\")",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "myorg",
        "x": 960,
        "y": 1800,
        "wires": [
            [
                "2071d3ec60d7a365",
                "e7706dd2dc420924",
                "0a90a7a026c1847f"
            ]
        ]
    },
    {
        "id": "07e0c2da0cdde893",
        "type": "influxdb in",
        "z": "7d33f045adfa2ce5",
        "influxdb": "0504f462f986c487",
        "name": "influx_cardiaque",
        "query": "from(bucket: \"mybucket\")\n  |> range(start: 2024-10-23, stop: 2024-10-24)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"cardiaque\")",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "myorg",
        "x": 940,
        "y": 1220,
        "wires": [
            [
                "2b646f6235241c25",
                "3c31b3496d099292",
                "05fe86f94fb83aa3",
                "d3f4bd9e863a4853",
                "314cc303c41e5536",
                "a5a6f2f2a7a88dae",
                "12888b2a5e1b9ae3"
            ]
        ]
    },
    {
        "id": "b7b4fa8cd0ac52ff",
        "type": "ui_text",
        "z": "7d33f045adfa2ce5",
        "group": "bc962b1e502fdd92",
        "order": 4,
        "width": "6",
        "height": "3",
        "name": "",
        "label": "Temps de conduite :",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 1480,
        "y": 1460,
        "wires": []
    },
    {
        "id": "9edfefe0b00502db",
        "type": "ui_text",
        "z": "7d33f045adfa2ce5",
        "group": "bc962b1e502fdd92",
        "order": 4,
        "width": "6",
        "height": "5",
        "name": "",
        "label": "Temps de somnolence total :",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 2340,
        "y": 840,
        "wires": []
    },
    {
        "id": "89c694a863d8f045",
        "type": "ui_text",
        "z": "7d33f045adfa2ce5",
        "group": "bc962b1e502fdd92",
        "order": 4,
        "width": "6",
        "height": "4",
        "name": "",
        "label": "Temps de somnolance la plus longue :",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 2370,
        "y": 900,
        "wires": []
    },
    {
        "id": "09bfd8172f93e5e2",
        "type": "ui_text",
        "z": "7d33f045adfa2ce5",
        "group": "bc962b1e502fdd92",
        "order": 4,
        "width": "6",
        "height": "4",
        "name": "",
        "label": "Nombre de d√©rives :",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 2320,
        "y": 1920,
        "wires": []
    },
    {
        "id": "3ce76782794fa0b9",
        "type": "ui_text",
        "z": "7d33f045adfa2ce5",
        "group": "bc962b1e502fdd92",
        "order": 4,
        "width": "6",
        "height": "5",
        "name": "",
        "label": "Horaires o√π les somnolence ont √©t√© les plus courantes :",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 2430,
        "y": 720,
        "wires": []
    },
    {
        "id": "c244ced9a5c0394e",
        "type": "ui_chart",
        "z": "7d33f045adfa2ce5",
        "name": "",
        "group": "161fc0b22611f508",
        "order": 1,
        "width": 0,
        "height": 0,
        "label": "Somnolence",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "Somnolence",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#7300ff",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#ff0000",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 2290,
        "y": 1060,
        "wires": [
            []
        ]
    },
    {
        "id": "18aba2a375c55cbd",
        "type": "ui_chart",
        "z": "7d33f045adfa2ce5",
        "name": "",
        "group": "2d526cab482570ba",
        "order": 1,
        "width": 0,
        "height": 0,
        "label": "BPM",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "BPM",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#ff0000",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#ff0000",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 2270,
        "y": 1220,
        "wires": [
            []
        ]
    },
    {
        "id": "b63f1b55ee1e71df",
        "type": "ui_chart",
        "z": "7d33f045adfa2ce5",
        "name": "",
        "group": "2d526cab482570ba",
        "order": 1,
        "width": 0,
        "height": 0,
        "label": "Variance",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "Variance",
        "dot": true,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#ff00f7",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#ff0000",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 2280,
        "y": 1360,
        "wires": [
            []
        ]
    },
    {
        "id": "4a860546a03c9abd",
        "type": "ui_chart",
        "z": "7d33f045adfa2ce5",
        "name": "",
        "group": "161fc0b22611f508",
        "order": 1,
        "width": 0,
        "height": 0,
        "label": "D√©rive",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "D√©rive",
        "dot": true,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#004cff",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#ff0000",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 2270,
        "y": 1800,
        "wires": [
            []
        ]
    }
]